01.
    Position of the cursor:
        (x, y) -> Position
    Pixels on the screen:
        Position would be relative to some other value.
        Different monitor have diff pixel count.

02.
    Depends on the type of data.
    For numbers, smallest type that can hold all values.
    For single character, one byte.
    For array of chars, either predefined number of bytes
    or pointer to location.

03.
    Date of birth, email address, etc...

04.
    We would create an new instance of mother/father
    record and we would then add a pointer to that record
    to the original structure.

05.
    mainloop:
        cmpq $2, HAIR_OFFSET(%rbx)
        jne endloop

        cmpq $3, HAIR_OFFSET(%rbx)
        jne endloop

        incq %rdi

06.
    .globl _start
    .section .data

    .section .text
        _start:
            movq $people, %rbx
            movq $0, %rdx

            movq numpeople, %rcx

            nextperson:
                leaq AGE_OFFSET(%rbx), %rax
                cmpq (%rax), %rdi
                jae endloop

                movq (%rax), %rdi

                endloop:
                    addq $PERSON_RECORD_SIZE, %rbx
                    loopq nextperson
            
            finish:
                movq $60, %rax
                syscall

07.
    .globl _start
    .section .data

    .section .text
        _start:
            movq $people, %rbx
            movq $0, %rdx

            movq $0, %rcx        

            nextperson:
                leaq AGE_OFFSET(%rbx), %rax
                cmpq (%rax), %rdi
                jae endloop

                movq (%rax), %rdi

                endloop:
                    addq $PERSON_RECORD_SIZE, %rbx
                    incq %rcx
                    cmpq %rcx, numpeople
                    jnz nextperson
            
            finish:
                movq $60, %rax
                syscall

08. 
.globl _start
.section .data

.section .text
    _start:
        movq $people, %rax
        movq $6, %rcx

        movq $0, %rdx
        movq $0, %rdi

        loop:
            cmpb $0, (%rax)
            je nextword
            incq %rax
            incq %rdx
            jmp loop

        isLongest:
            cmpq %rdx, %rdi
            jg setLongest

        setLongest:
            movq %rdx, %rdi
            jmp cont
            
        nextword:
            jmp isLongest
            cont:
                decq %rcx
                cmpq $0, %rcx
                je finish
                addq $41, %rax
                movq $0, %rdx
                jmp loop

        
        finish:
            movq $60, %rax
            syscall